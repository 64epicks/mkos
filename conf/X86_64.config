# Build options
ARCH=X86_64
BITS=64
DEBUG=TRUE
OPTIMIZE=FALSE
MULTICORE=TRUE
LOAD_SYSTEM=MULTIBOOT2

# Run options
LOGLEVEL=2
# Allocate enough space for 512 log entries (not including the actual message)
LOGENTRY_SIZE=512

# Binaries
CC=gcc
CXX=g++
ASM=nasm
LINK=ld

# Flags
INCLUDE_DIRS=-I$(SOURCE_DIR)/arch/include -I$(SOURCE_DIR)/drivers/include -I$(SOURCE_DIR)/mutils/include -I$(SOURCE_DIR)/kernel/include
# These values are passed to the C compiler
DEFINE_VALS=-DVERSION=\"$(VERSION)\" -DVERSION_NAME=\"$(VERSION_NAME)\" -DVERSION_DOMAIN=\"$(VERSION_DOMAIN)\" -DLOGLEVEL=$(LOGLEVEL) -DLOGENTRY_SIZE=$(LOGENTRY_SIZE)
CC_FLAGS=-nostdinc -ffreestanding -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable -c -masm=intel -zmuldefs -fno-stack-protector -fno-omit-frame-pointer $(INCLUDE_DIRS) $(DEFINE_VALS)
CXX_FLAGS=$(CC_FLAGS)
ASM_FLAGS=-f elf64 -Wall
LINK_ARCH=-m elf_x86_64
LINK_FLAGS=$(LINK_ARCH) -nostdlib -z muldefs -Map synos.map

# Documentation for variables:

# ARCH:			Main architecture
# BITS:			Number of bits in architecture
# DEBUG:		Compile with debug symbols
# OPIMIZE:		Optimize codde
# MULTICORE:	Use multicore (if available)
# LOAD_SYSTEM:	Boot method
# FILE_SYSTEM:	Main file system on root drive

# BUILD_KERNEL:  	Build the object files for the kernel
# BUILD_LIBC:    	Build synos C library
# BUILD_DRIVERS: 	Build the userspace drivers
# LINK_INITIMG:  	Create init boot image (loaded by the bootloader). If this is set to true, then it will overwrite the options necessary to be able to link.
# CREATE_ROOTDIR:	Create root directory